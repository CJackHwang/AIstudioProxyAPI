[project]
name = "aistudioproxyapi"
version = "0.1.0"
description = "AI Studio Proxy API - A proxy service for Google AI Studio with enhanced features"
authors = [
    {name = "AI Studio Proxy Team", email = "team@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9,<4.0"
keywords = ["ai", "proxy", "api", "google", "ai-studio"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi==0.115.12",
    "pydantic>=2.7.1,<3.0.0",
    "uvicorn==0.29.0",
    "python-dotenv==1.0.1",
    "websockets==12.0",
    "httptools==0.6.1",
    "uvloop; sys_platform != 'win32'",
    "playwright",
    "camoufox[geoip]==0.4.11",
    "cryptography==42.0.5",
    "aiohttp~=3.9.5",
    "requests==2.31.0",
    "pyjwt==2.8.0",
    "Flask==3.0.3",
    "aiosocks~=0.2.6",
    "python-socks~=2.7.1",
]

[tool.poetry]
package-mode = false

# Poetry configuration for development workflow
[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
mypy = "^1.0.0"
flake8 = "^6.0.0"
pre-commit = "^3.0.0"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | deprecated_javascript_version
  | errors_py
  | logs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["deprecated_javascript_version/*", "errors_py/*", "logs/*"]

# MyPy configuration (relaxed for gradual typing adoption)
[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
ignore_errors = true
# Only check specific modules that are well-typed
files = ["api_utils/auth_utils.py", "tests/"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["api_utils", "browser_utils", "config", "models", "logging_utils", "stream"]
omit = [
    "*/tests/*",
    "*/test_*",
    "deprecated_javascript_version/*",
    "errors_py/*",
    "logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"